//
// Copyright (C) 2024 Dmitry Kolesnikov
//
// This file may be modified and distributed under the terms
// of the MIT license.  See the LICENSE file for details.
// https://github.com/kshard/float8
//

package math8_test

import (
	"math"
	"testing"

	"github.com/chewxy/math32"
	"github.com/kshard/float8/internal/math8"
)

var f32Tof8 = map[uint32]uint8{
	0x00000000: 0x00, // 0.000000
	0x3c100000: 0x01, // 0.008789
	0x3c200000: 0x02, // 0.009766
	0x3c300000: 0x03, // 0.010742
	0x3c400000: 0x04, // 0.011719
	0x3c500000: 0x05, // 0.012695
	0x3c600000: 0x06, // 0.013672
	0x3c700000: 0x07, // 0.014648
	0x3c800000: 0x08, // 0.015625
	0x3c900000: 0x09, // 0.017578
	0x3ca00000: 0x0a, // 0.019531
	0x3cb00000: 0x0b, // 0.021484
	0x3cc00000: 0x0c, // 0.023438
	0x3cd00000: 0x0d, // 0.025391
	0x3ce00000: 0x0e, // 0.027344
	0x3cf00000: 0x0f, // 0.029297
	0x3d000000: 0x10, // 0.031250
	0x3d100000: 0x11, // 0.035156
	0x3d200000: 0x12, // 0.039062
	0x3d300000: 0x13, // 0.042969
	0x3d400000: 0x14, // 0.046875
	0x3d500000: 0x15, // 0.050781
	0x3d600000: 0x16, // 0.054688
	0x3d700000: 0x17, // 0.058594
	0x3d800000: 0x18, // 0.062500
	0x3d900000: 0x19, // 0.070312
	0x3da00000: 0x1a, // 0.078125
	0x3db00000: 0x1b, // 0.085938
	0x3dc00000: 0x1c, // 0.093750
	0x3dd00000: 0x1d, // 0.101562
	0x3de00000: 0x1e, // 0.109375
	0x3df00000: 0x1f, // 0.117188
	0x3e000000: 0x20, // 0.125000
	0x3e100000: 0x21, // 0.140625
	0x3e200000: 0x22, // 0.156250
	0x3e300000: 0x23, // 0.171875
	0x3e400000: 0x24, // 0.187500
	0x3e500000: 0x25, // 0.203125
	0x3e600000: 0x26, // 0.218750
	0x3e700000: 0x27, // 0.234375
	0x3e800000: 0x28, // 0.250000
	0x3e900000: 0x29, // 0.281250
	0x3ea00000: 0x2a, // 0.312500
	0x3eb00000: 0x2b, // 0.343750
	0x3ec00000: 0x2c, // 0.375000
	0x3ed00000: 0x2d, // 0.406250
	0x3ee00000: 0x2e, // 0.437500
	0x3ef00000: 0x2f, // 0.468750
	0x3f000000: 0x30, // 0.500000
	0x3f100000: 0x31, // 0.562500
	0x3f200000: 0x32, // 0.625000
	0x3f300000: 0x33, // 0.687500
	0x3f400000: 0x34, // 0.750000
	0x3f500000: 0x35, // 0.812500
	0x3f600000: 0x36, // 0.875000
	0x3f700000: 0x37, // 0.937500
	0x3f800000: 0x38, // 1.000000
	0x3f900000: 0x39, // 1.125000
	0x3fa00000: 0x3a, // 1.250000
	0x3fb00000: 0x3b, // 1.375000
	0x3fc00000: 0x3c, // 1.500000
	0x3fd00000: 0x3d, // 1.625000
	0x3fe00000: 0x3e, // 1.750000
	0x3ff00000: 0x3f, // 1.875000
	0x40000000: 0x40, // 2.000000
	0x40100000: 0x41, // 2.250000
	0x40200000: 0x42, // 2.500000
	0x40300000: 0x43, // 2.750000
	0x40400000: 0x44, // 3.000000
	0x40500000: 0x45, // 3.250000
	0x40600000: 0x46, // 3.500000
	0x40700000: 0x47, // 3.750000
	0x40800000: 0x48, // 4.000000
	0x40900000: 0x49, // 4.500000
	0x40a00000: 0x4a, // 5.000000
	0x40b00000: 0x4b, // 5.500000
	0x40c00000: 0x4c, // 6.000000
	0x40d00000: 0x4d, // 6.500000
	0x40e00000: 0x4e, // 7.000000
	0x40f00000: 0x4f, // 7.500000
	0x41000000: 0x50, // 8.000000
	0x41100000: 0x51, // 9.000000
	0x41200000: 0x52, // 10.000000
	0x41300000: 0x53, // 11.000000
	0x41400000: 0x54, // 12.000000
	0x41500000: 0x55, // 13.000000
	0x41600000: 0x56, // 14.000000
	0x41700000: 0x57, // 15.000000
	0x41800000: 0x58, // 16.000000
	0x41900000: 0x59, // 18.000000
	0x41a00000: 0x5a, // 20.000000
	0x41b00000: 0x5b, // 22.000000
	0x41c00000: 0x5c, // 24.000000
	0x41d00000: 0x5d, // 26.000000
	0x41e00000: 0x5e, // 28.000000
	0x41f00000: 0x5f, // 30.000000
	0x42000000: 0x60, // 32.000000
	0x42100000: 0x61, // 36.000000
	0x42200000: 0x62, // 40.000000
	0x42300000: 0x63, // 44.000000
	0x42400000: 0x64, // 48.000000
	0x42500000: 0x65, // 52.000000
	0x42600000: 0x66, // 56.000000
	0x42700000: 0x67, // 60.000000
	0x42800000: 0x68, // 64.000000
	0x42900000: 0x69, // 72.000000
	0x42a00000: 0x6a, // 80.000000
	0x42b00000: 0x6b, // 88.000000
	0x42c00000: 0x6c, // 96.000000
	0x42d00000: 0x6d, // 104.000000
	0x42e00000: 0x6e, // 112.000000
	0x42f00000: 0x6f, // 120.000000
	0x43000000: 0x70, // 128.000000
	0x43100000: 0x71, // 144.000000
	0x43200000: 0x72, // 160.000000
	0x43300000: 0x73, // 176.000000
	0x43400000: 0x74, // 192.000000
	0x43500000: 0x75, // 208.000000
	0x43600000: 0x76, // 224.000000
	0x43700000: 0x77, // 240.000000
	0x43800000: 0x78, // 256.000000 (Inf)
	0x43900000: 0x79, // 288.000000 (NaN)
	0x43a00000: 0x7a, // 320.000000 (NaN)
	0x43b00000: 0x7b, // 352.000000 (NaN)
	0x43c00000: 0x7c, // 384.000000 (NaN)
	0x43d00000: 0x7d, // 416.000000 (NaN)
	0x43e00000: 0x7e, // 448.000000 (NaN)
	0x43f00000: 0x7f, // 480.000000 (NaN)
	0xbc000000: 0x80, // -0.007812
	0xbc100000: 0x81, // -0.008789
	0xbc200000: 0x82, // -0.009766
	0xbc300000: 0x83, // -0.010742
	0xbc400000: 0x84, // -0.011719
	0xbc500000: 0x85, // -0.012695
	0xbc600000: 0x86, // -0.013672
	0xbc700000: 0x87, // -0.014648
	0xbc800000: 0x88, // -0.015625
	0xbc900000: 0x89, // -0.017578
	0xbca00000: 0x8a, // -0.019531
	0xbcb00000: 0x8b, // -0.021484
	0xbcc00000: 0x8c, // -0.023438
	0xbcd00000: 0x8d, // -0.025391
	0xbce00000: 0x8e, // -0.027344
	0xbcf00000: 0x8f, // -0.029297
	0xbd000000: 0x90, // -0.031250
	0xbd100000: 0x91, // -0.035156
	0xbd200000: 0x92, // -0.039062
	0xbd300000: 0x93, // -0.042969
	0xbd400000: 0x94, // -0.046875
	0xbd500000: 0x95, // -0.050781
	0xbd600000: 0x96, // -0.054688
	0xbd700000: 0x97, // -0.058594
	0xbd800000: 0x98, // -0.062500
	0xbd900000: 0x99, // -0.070312
	0xbda00000: 0x9a, // -0.078125
	0xbdb00000: 0x9b, // -0.085938
	0xbdc00000: 0x9c, // -0.093750
	0xbdd00000: 0x9d, // -0.101562
	0xbde00000: 0x9e, // -0.109375
	0xbdf00000: 0x9f, // -0.117188
	0xbe000000: 0xa0, // -0.125000
	0xbe100000: 0xa1, // -0.140625
	0xbe200000: 0xa2, // -0.156250
	0xbe300000: 0xa3, // -0.171875
	0xbe400000: 0xa4, // -0.187500
	0xbe500000: 0xa5, // -0.203125
	0xbe600000: 0xa6, // -0.218750
	0xbe700000: 0xa7, // -0.234375
	0xbe800000: 0xa8, // -0.250000
	0xbe900000: 0xa9, // -0.281250
	0xbea00000: 0xaa, // -0.312500
	0xbeb00000: 0xab, // -0.343750
	0xbec00000: 0xac, // -0.375000
	0xbed00000: 0xad, // -0.406250
	0xbee00000: 0xae, // -0.437500
	0xbef00000: 0xaf, // -0.468750
	0xbf000000: 0xb0, // -0.500000
	0xbf100000: 0xb1, // -0.562500
	0xbf200000: 0xb2, // -0.625000
	0xbf300000: 0xb3, // -0.687500
	0xbf400000: 0xb4, // -0.750000
	0xbf500000: 0xb5, // -0.812500
	0xbf600000: 0xb6, // -0.875000
	0xbf700000: 0xb7, // -0.937500
	0xbf800000: 0xb8, // -1.000000
	0xbf900000: 0xb9, // -1.125000
	0xbfa00000: 0xba, // -1.250000
	0xbfb00000: 0xbb, // -1.375000
	0xbfc00000: 0xbc, // -1.500000
	0xbfd00000: 0xbd, // -1.625000
	0xbfe00000: 0xbe, // -1.750000
	0xbff00000: 0xbf, // -1.875000
	0xc0000000: 0xc0, // -2.000000
	0xc0100000: 0xc1, // -2.250000
	0xc0200000: 0xc2, // -2.500000
	0xc0300000: 0xc3, // -2.750000
	0xc0400000: 0xc4, // -3.000000
	0xc0500000: 0xc5, // -3.250000
	0xc0600000: 0xc6, // -3.500000
	0xc0700000: 0xc7, // -3.750000
	0xc0800000: 0xc8, // -4.000000
	0xc0900000: 0xc9, // -4.500000
	0xc0a00000: 0xca, // -5.000000
	0xc0b00000: 0xcb, // -5.500000
	0xc0c00000: 0xcc, // -6.000000
	0xc0d00000: 0xcd, // -6.500000
	0xc0e00000: 0xce, // -7.000000
	0xc0f00000: 0xcf, // -7.500000
	0xc1000000: 0xd0, // -8.000000
	0xc1100000: 0xd1, // -9.000000
	0xc1200000: 0xd2, // -10.000000
	0xc1300000: 0xd3, // -11.000000
	0xc1400000: 0xd4, // -12.000000
	0xc1500000: 0xd5, // -13.000000
	0xc1600000: 0xd6, // -14.000000
	0xc1700000: 0xd7, // -15.000000
	0xc1800000: 0xd8, // -16.000000
	0xc1900000: 0xd9, // -18.000000
	0xc1a00000: 0xda, // -20.000000
	0xc1b00000: 0xdb, // -22.000000
	0xc1c00000: 0xdc, // -24.000000
	0xc1d00000: 0xdd, // -26.000000
	0xc1e00000: 0xde, // -28.000000
	0xc1f00000: 0xdf, // -30.000000
	0xc2000000: 0xe0, // -32.000000
	0xc2100000: 0xe1, // -36.000000
	0xc2200000: 0xe2, // -40.000000
	0xc2300000: 0xe3, // -44.000000
	0xc2400000: 0xe4, // -48.000000
	0xc2500000: 0xe5, // -52.000000
	0xc2600000: 0xe6, // -56.000000
	0xc2700000: 0xe7, // -60.000000
	0xc2800000: 0xe8, // -64.000000
	0xc2900000: 0xe9, // -72.000000
	0xc2a00000: 0xea, // -80.000000
	0xc2b00000: 0xeb, // -88.000000
	0xc2c00000: 0xec, // -96.000000
	0xc2d00000: 0xed, // -104.000000
	0xc2e00000: 0xee, // -112.000000
	0xc2f00000: 0xef, // -120.000000
	0xc3000000: 0xf0, // -128.000000
	0xc3100000: 0xf1, // -144.000000
	0xc3200000: 0xf2, // -160.000000
	0xc3300000: 0xf3, // -176.000000
	0xc3400000: 0xf4, // -192.000000
	0xc3500000: 0xf5, // -208.000000
	0xc3600000: 0xf6, // -224.000000
	0xc3700000: 0xf7, // -240.000000
	0xc3800000: 0xf8, // -256.000000 (-Inf)
	0xc3900000: 0xf9, // -288.000000 (NaN)
	0xc3a00000: 0xfa, // -320.000000 (NaN)
	0xc3b00000: 0xfb, // -352.000000 (NaN)
	0xc3c00000: 0xfc, // -384.000000 (NaN)
	0xc3d00000: 0xfd, // -416.000000 (NaN)
	0xc3e00000: 0xfe, // -448.000000 (NaN)
}

var f8 = map[string][]uint8{
	"+0.01": {
		0x00, // 0.000000
		0x01, // 0.008789
		0x02, // 0.009766
		0x03, // 0.010742
		0x04, // 0.011719
		0x05, // 0.012695
		0x06, // 0.013672
		0x07, // 0.014648
		0x08, // 0.015625
		0x09, // 0.017578
		0x0a, // 0.019531
		0x0b, // 0.021484
		0x0c, // 0.023438
		0x0d, // 0.025391
		0x0e, // 0.027344
		0x0f, // 0.029297
		0x10, // 0.031250
		0x11, // 0.035156
		0x12, // 0.039062
		0x13, // 0.042969
		0x14, // 0.046875
		0x15, // 0.050781
		0x16, // 0.054688
		0x17, // 0.058594
		0x18, // 0.062500
		0x19, // 0.070312
		0x1a, // 0.078125
		0x1b, // 0.085938
		0x1c, // 0.093750
	},
	"+0.1": {
		0x1d, // 0.101562
		0x1e, // 0.109375
		0x1f, // 0.117188
		0x20, // 0.125000
		0x21, // 0.140625
		0x22, // 0.156250
		0x23, // 0.171875
		0x24, // 0.187500
		0x25, // 0.203125
		0x26, // 0.218750
		0x27, // 0.234375
		0x28, // 0.250000
		0x29, // 0.281250
		0x2a, // 0.312500
		0x2b, // 0.343750
		0x2c, // 0.375000
		0x2d, // 0.406250
		0x2e, // 0.437500
		0x2f, // 0.468750
		0x30, // 0.500000
		0x31, // 0.562500
		0x32, // 0.625000
		0x33, // 0.687500
		0x34, // 0.750000
		0x35, // 0.812500
		0x36, // 0.875000
		0x37, // 0.937500
	},

	"+1.0": {
		0x38, // 1.000000
		0x39, // 1.125000
		0x3a, // 1.250000
		0x3b, // 1.375000
		0x3c, // 1.500000
		0x3d, // 1.625000
		0x3e, // 1.750000
		0x3f, // 1.875000
		0x40, // 2.000000
		0x41, // 2.250000
		0x42, // 2.500000
		0x43, // 2.750000
		0x44, // 3.000000
		0x45, // 3.250000
		0x46, // 3.500000
		0x47, // 3.750000
		0x48, // 4.000000
		0x49, // 4.500000
		0x4a, // 5.000000
		0x4b, // 5.500000
		0x4c, // 6.000000
		0x4d, // 6.500000
		0x4e, // 7.000000
		0x4f, // 7.500000
		0x50, // 8.000000
		0x51, // 9.000000
	},
	"+10.0": {
		0x52, // 10.000000
		0x53, // 11.000000
		0x54, // 12.000000
		0x55, // 13.000000
		0x56, // 14.000000
		0x57, // 15.000000
		0x58, // 16.000000
		0x59, // 18.000000
		0x5a, // 20.000000
		0x5b, // 22.000000
		0x5c, // 24.000000
		0x5d, // 26.000000
		0x5e, // 28.000000
		0x5f, // 30.000000
		0x60, // 32.000000
		0x61, // 36.000000
		0x62, // 40.000000
		0x63, // 44.000000
		0x64, // 48.000000
		0x65, // 52.000000
		0x66, // 56.000000
		0x67, // 60.000000
		0x68, // 64.000000
		0x69, // 72.000000
		0x6a, // 80.000000
		0x6b, // 88.000000
		0x6c, // 96.000000
	},
	"+100.0": {
		0x6d, // 104.000000
		0x6e, // 112.000000
		0x6f, // 120.000000
		0x70, // 128.000000
		0x71, // 144.000000
		0x72, // 160.000000
		0x73, // 176.000000
		0x74, // 192.000000
		0x75, // 208.000000
		0x76, // 224.000000
		0x77, // 240.000000
	},
	// 0x78, // 256.000000 (Inf)
	// 0x79, // 288.000000 (NaN)
	// 0x7a, // 320.000000 (NaN)
	// 0x7b, // 352.000000 (NaN)
	// 0x7c, // 384.000000 (NaN)
	// 0x7d, // 416.000000 (NaN)
	// 0x7e, // 448.000000 (NaN)
	// 0x7f, // 480.000000 (NaN)
	"-0.01": {
		0x80, // -0.007812
		0x81, // -0.008789
		0x82, // -0.009766
		0x83, // -0.010742
		0x84, // -0.011719
		0x85, // -0.012695
		0x86, // -0.013672
		0x87, // -0.014648
		0x88, // -0.015625
		0x89, // -0.017578
		0x8a, // -0.019531
		0x8b, // -0.021484
		0x8c, // -0.023438
		0x8d, // -0.025391
		0x8e, // -0.027344
		0x8f, // -0.029297
		0x90, // -0.031250
		0x91, // -0.035156
		0x92, // -0.039062
		0x93, // -0.042969
		0x94, // -0.046875
		0x95, // -0.050781
		0x96, // -0.054688
		0x97, // -0.058594
		0x98, // -0.062500
		0x99, // -0.070312
		0x9a, // -0.078125
		0x9b, // -0.085938
		0x9c, // -0.093750
	},
	"-0.1": {
		0x9d, // -0.101562
		0x9e, // -0.109375
		0x9f, // -0.117188
		0xa0, // -0.125000
		0xa1, // -0.140625
		0xa2, // -0.156250
		0xa3, // -0.171875
		0xa4, // -0.187500
		0xa5, // -0.203125
		0xa6, // -0.218750
		0xa7, // -0.234375
		0xa8, // -0.250000
		0xa9, // -0.281250
		0xaa, // -0.312500
		0xab, // -0.343750
		0xac, // -0.375000
		0xad, // -0.406250
		0xae, // -0.437500
		0xaf, // -0.468750
		0xb0, // -0.500000
		0xb1, // -0.562500
		0xb2, // -0.625000
		0xb3, // -0.687500
		0xb4, // -0.750000
		0xb5, // -0.812500
		0xb6, // -0.875000
		0xb7, // -0.937500
	},
	"-1.0": {
		0xb8, // -1.000000
		0xb9, // -1.125000
		0xba, // -1.250000
		0xbb, // -1.375000
		0xbc, // -1.500000
		0xbd, // -1.625000
		0xbe, // -1.750000
		0xbf, // -1.875000
		0xc0, // -2.000000
		0xc1, // -2.250000
		0xc2, // -2.500000
		0xc3, // -2.750000
		0xc4, // -3.000000
		0xc5, // -3.250000
		0xc6, // -3.500000
		0xc7, // -3.750000
		0xc8, // -4.000000
		0xc9, // -4.500000
		0xca, // -5.000000
		0xcb, // -5.500000
		0xcc, // -6.000000
		0xcd, // -6.500000
		0xce, // -7.000000
		0xcf, // -7.500000
		0xd0, // -8.000000
		0xd1, // -9.000000
	},
	"-10.0": {
		0xd2, // -10.000000
		0xd3, // -11.000000
		0xd4, // -12.000000
		0xd5, // -13.000000
		0xd6, // -14.000000
		0xd7, // -15.000000
		0xd8, // -16.000000
		0xd9, // -18.000000
		0xda, // -20.000000
		0xdb, // -22.000000
		0xdc, // -24.000000
		0xdd, // -26.000000
		0xde, // -28.000000
		0xdf, // -30.000000
		0xe0, // -32.000000
		0xe1, // -36.000000
		0xe2, // -40.000000
		0xe3, // -44.000000
		0xe4, // -48.000000
		0xe5, // -52.000000
		0xe6, // -56.000000
		0xe7, // -60.000000
		0xe8, // -64.000000
		0xe9, // -72.000000
		0xea, // -80.000000
		0xeb, // -88.000000
		0xec, // -96.000000
	},
	"-100": {
		0xed, // -104.000000
		0xee, // -112.000000
		0xef, // -120.000000
		0xf0, // -128.000000
		0xf1, // -144.000000
		0xf2, // -160.000000
		0xf3, // -176.000000
		0xf4, // -192.000000
		0xf5, // -208.000000
		0xf6, // -224.000000
		0xf7, // -240.000000
	},
	//   0xf8, // -256.000000 (-Inf)
	//   0xf9, // -288.000000 (NaN)
	//   0xfa, // -320.000000 (NaN)
	//   0xfb, // -352.000000 (NaN)
	//   0xfc, // -384.000000 (NaN)
	//   0xfd, // -416.000000 (NaN)
	//   0xfe, // -448.000000 (NaN)

}

func TestToFloat8(t *testing.T) {
	for b32, b8 := range f32Tof8 {
		f32 := math.Float32frombits(b32)
		f8 := math8.ToFloat8(f32)
		if f8 != b8 {
			t.Errorf("0x%08x : %f, wanted=0x%02x, got=0x%02x", b32, f32, b8, f8)
		}
	}
}

func TestToFloat32(t *testing.T) {
	for b32, b8 := range f32Tof8 {
		f32 := math8.ToFloat32(b8)
		x32 := math.Float32bits(f32)
		if b32 != x32 {
			t.Errorf("0x%08x : %f, got=0x%08x", b32, f32, x32)
		}
	}
}

func TestSum(t *testing.T) {
	f := func(a, b uint8, e float32) {
		t.Helper()

		a32 := math8.ToFloat32(a)
		b32 := math8.ToFloat32(b)
		c32 := a32 + b32

		c := math8.Add(a, b)
		x32 := math8.ToFloat32(c)
		if math32.Abs(c32-x32) > e {
			t.Errorf("0x%02x + 0x%02x : %f + %f wanted=%f, got=%f, diff=%f", a, b, a32, b32, c32, x32, math32.Abs(c32-x32))
		}
	}

	for group, delta := range map[string]float32{
		"+0.01": 0.016,
		"-0.01": 0.016,
		"+0.1":  0.16,
		"-0.1":  0.16,
		"+1.0":  1.6,
		"-1.0":  1.6,
		"+10.0": 16.0,
		"-10.0": 16.0,
	} {
		for _, a := range f8[group] {
			for _, b := range f8[group] {
				f(a, b, delta)
			}
		}
	}
}

func TestSub(t *testing.T) {
	f := func(a, b uint8, e float32) {
		t.Helper()

		a32 := math8.ToFloat32(a)
		b32 := math8.ToFloat32(b)
		c32 := a32 - b32

		c := math8.Sub(a, b)
		x32 := math8.ToFloat32(c)
		if math32.Abs(c32-x32) > e {
			t.Errorf("0x%02x - 0x%02x : %f - %f wanted=%f, got=%f, diff=%f", a, b, a32, b32, c32, x32, math32.Abs(c32-x32))
		}
	}

	for group, delta := range map[string]float32{
		"+0.01": 0.016,
		"-0.01": 0.016,
		"+0.1":  0.16,
		"-0.1":  0.16,
		"+1.0":  1.6,
		"-1.0":  1.6,
		"+10.0": 16.0,
		"-10.0": 16.0,
	} {
		for _, a := range f8[group] {
			for _, b := range f8[group] {
				f(a, b, delta)
			}
		}
	}
}

func TestMul(t *testing.T) {
	f := func(a, b uint8, e float32) {
		t.Helper()

		a32 := math8.ToFloat32(a)
		b32 := math8.ToFloat32(b)
		c32 := a32 * b32

		c := math8.Mul(a, b)
		x32 := math8.ToFloat32(c)
		if math32.Abs(c32-x32) > e {
			t.Errorf("0x%02x * 0x%02x : %f * %f wanted=%f, got=%f, diff=%f", a, b, a32, b32, c32, x32, math32.Abs(c32-x32))
		}
	}

	for group, delta := range map[string]float32{
		"+0.01": 0.009,
		"-0.01": 0.009,
		"+0.1":  0.09,
		"-0.1":  0.09,
		"+1.0":  4.0,
		"-1.0":  4.0,
	} {
		for _, a := range f8[group] {
			for _, b := range f8[group] {
				f(a, b, delta)
			}
		}
	}
}

func TestDiv(t *testing.T) {
	f := func(a, b uint8, e float32) {
		t.Helper()

		a32 := math8.ToFloat32(a)
		b32 := math8.ToFloat32(b)
		c32 := a32 / b32

		c := math8.Div(a, b)
		x32 := math8.ToFloat32(c)
		if math32.Abs(c32-x32) > e {
			t.Errorf("0x%02x / 0x%02x : %f / %f wanted=%f, got=%f, diff=%f", a, b, a32, b32, c32, x32, math32.Abs(c32-x32))
		}
	}

	for group, delta := range map[string]float32{
		"+0.01":  0.9,
		"-0.01":  0.9,
		"+0.1":   0.9,
		"-0.1":   0.9,
		"+1.0":   0.9,
		"-1.0":   0.9,
		"+10.0":  0.9,
		"-10.0":  0.9,
		"+100.0": 0.9,
		"-100.0": 0.9,
	} {
		for _, a := range f8[group] {
			for _, b := range f8[group] {
				if b != 0 {
					f(a, b, delta)
				}
			}
		}
	}
}
